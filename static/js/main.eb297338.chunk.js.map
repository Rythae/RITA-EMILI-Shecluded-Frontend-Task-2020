{"version":3,"sources":["store/actions/actions.js","components/Home.js","components/Cats.js","components/LOTR.js","App.js","store/reducers/breeds.js","store/reducers/characters.js","serviceWorker.js","index.js"],"names":["fetchCats","dispatch","axios","get","method","headers","Accept","then","response","data","res","type","payload","getCats","Home","className","to","Component","CatImg","breed_id","useState","src","setSrc","useEffect","imageUrl","url","alt","Cats","state","breeds","this","props","map","breed","name","temperament","life_span","shedding_level","dog_friendly","child","connect","cat","catbreeds","actionCreators","LOTR","characters","fetchLotr","character","gender","lotr","docs","console","log","result","getLotr","App","componentDidMount","path","exact","component","initialState","reducer","action","concat","Boolean","window","location","hostname","match","rootReducer","combineReducers","breedReducer","lotrReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb297338.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const FETCH_CATS = 'FETCH_CATS';\n\nexport const FETCH_CHARACTERS = 'FETCH_CHARACTERS';\n\n\nexport const getLotr = (res) => {\n    return {\n        type: FETCH_CHARACTERS,\n        result: res\n    };\n}\n\n\nexport const getCats = (res) => {\n    return {\n        type: FETCH_CATS,\n        payload: res\n        \n    };\n}\n\nexport const fetchCats = () => {\n    return dispatch => {\n        const apiKey = `d3cd3f3e-a111-4460-8c2d-faf8e578ea96`\n            return axios.get(`https://api.thecatapi.com/v1/breeds?limit=10&page=1&order=asc?key=${apiKey}`, {\n                method: \"GET\",\n                headers: {\n                  'Content-Type': 'application/json',\n                  Accept: 'application/json',\n                }\n              })\n                .then(response => response.data)\n                 .then(res => {\n                    dispatch(getCats(res));\n                })\n            \n        }\n}\n\n\nexport const fetchLotr = () => {\n    return dispatch => {\n        const token = `htbdbQC0aNb5MVrVWTTQ`\n            return axios.get(`https://the-one-api.herokuapp.com/v1/character`, {\n                method: \"GET\",\n                headers: {\n                  'Content-Type': 'application/json',\n                  Accept: 'application/json',\n                  'Authorization': `Bearer ${token}`\n                }\n              })\n              .then(response => response.data.docs)\n              .then(res => {\n                 console.log(res)\n                 dispatch(getLotr(res));\n            })\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../sass/main.scss';\n\nclass Home extends Component{\n\n    render () {\n        return (\n            <div className=\"container-home\">\n                <div className=\"center-home\">\n                <h1 className=\"welcome\">Welcome to Homepage!</h1>\n                <p className=\"for-sale\">Do take a tour and have fun!</p>\n                <div className=\"center-link\">\n                    <Link to=\"/cats\" className=\"nav-link\">\n                        View cats\n                    </Link>\n                    <Link to=\"/characters\" className=\"nav-link\">\n                        LOTR\n                    </Link>\n                </div>\n                </div>\n            </div>\n        );\n }\n}\n\nexport default Home;\n","import React, { Component, useEffect, useState } from \"react\";\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport * as actionCreators from '../store/actions/actions';\n\nimport '../sass/main.scss'\n\nconst apiKey = `d3cd3f3e-a111-4460-8c2d-faf8e578ea96`\n\nconst CatImg = ({ breed_id }) => {\n  const [src, setSrc] = useState(null)\n  useEffect(() => {\n    axios.get(`https://api.thecatapi.com/v1/images/search?key=${apiKey}?breed_id=${breed_id}`)\n    .then( response => {\n      const imageUrl =  response.data[0].url;\n          setSrc(imageUrl)\n      })\n  }, [])\n\n  return <img src={src} alt=\"\" />\n}\n\nclass Cats extends Component {\n\n  state = {\n    imageUrl:  [],\n    breeds: [],\n  }\n\n  render() {\n    return (\n      <div className=\"container-cat\">\n        <h1 className=\"heading-primary\">Your favourite lovely cats!</h1>\n        <section className=\"breeds\">\n          {this.props.breeds.map((breed) => (<>\n              <section className=\"cat-img\"><CatImg breed_id={breed.breed_id}/></section>\n            <div className=\"breeds_details\">\n            <div className=\"breeds-details-2\">\n              <h5>{breed.name}</h5>\n              <p>{breed.temperament}</p>\n              <p>{breed.life_span}</p>\n              <p>{breed.shedding_level}</p>\n              <p>{breed.dog_friendly}</p>\n              <p>{breed.child}</p>\n              </div>\n            </div>\n          </>))}\n        </section>\n      </div>\n    );\n    \n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n      breeds: state.cat.catbreeds,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      fetchCats: (response) => dispatch(actionCreators.fetchCats(response)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cats);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../store/actions/actions';\n\nimport '../sass/main.scss';\n\n\nclass LOTR extends Component {\n\n  state = {\n    characters: [],\n  }\n\n  componentDidMount() {\n    this.props.fetchLotr()\n  }\n\n  render () {\n     return (\n       <div className=\"epic\">\n          <h1 className=\"heading-primary\">Your favourite characters!</h1>\n         {this.props.characters.map((character) => (<>\n          <div className=\"lotr-details\">\n         <p className=\"details\">{character.name}</p>\n         <p className=\"details\">{character.gender}</p>\n          </div>\n         </>))}\n       </div>\n     )\n  } \n}\n\nconst mapStateToProps = state => {\n  return {\n\n    characters: state.lotr.characters,\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchLotr: (response) => dispatch(actionCreators.fetchLotr(response)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LOTR);","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport { fetchCats } from './store/actions/actions';\nimport Home from  './components/Home';\nimport Cats from './components/Cats';\nimport LOTR from './components/LOTR';\n\nimport '../src/sass/main.scss';\n\n\n\nclass App extends Component {\n\n  componentDidMount = () => {\n    this.props.fetchCats()\n  }\n\n  render () {\n    return (\n      <Router>\n        <div className=\"container\">\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/cats\" component={Cats} />\n        <Route path=\"/characters\" component={LOTR} />\n        </div>\n      </Router>\n    );\n  }\n \n}\n\nconst mapStateToProps = state => {\n      return {\n        breeds: state.cat.catbreeds\n      }\n}\n\nconst mapDispatchToProps = dispatch => {\n      return {\n          fetchCats: () => dispatch(fetchCats())\n      }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from '../actions/actions';\n\nconst initialState = {\n    catbreeds: [],\n    imageUrl:  [],\n};\n\nconst reducer = (state = initialState, action) => {\n    switch ( action.type ) {\n        case actionTypes.FETCH_CATS:\n            return {\n                ...state,\n                catbreeds: state.catbreeds.concat(action.payload)\n            }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import * as actionTypes from '../actions/actions';\n\nconst initialState = {\n    characters: [],\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_CHARACTERS: \n            return {\n                ...state,\n                characters: state.characters.concat(action.result)\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\n\nimport breedReducer from './store/reducers/breeds';\nimport lotrReducer from './store/reducers/characters';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n    cat: breedReducer,\n    lotr: lotrReducer\n});\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}